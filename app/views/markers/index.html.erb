<%- model_class = Marker -%>
<div class="page-header">
  <h1>My Google Maps Demo</h1>
</div>
    <div>
     <input type="text" id="addressInput" size="10"/>
    <select id="radiusSelect">
      <option value="25" selected>25mi</option>
      <option value="100">100mi</option>
      <option value="200">200mi</option>
    </select>

    <input type="button" onclick="searchLocations()" value="display top-n stores"/>
    </div>
    <div><select id="locationSelect" style="width:100%;visibility:hidden"></select></div>
    <div id="map"></div>
    <script>
    var locationSelect;
    var locations = [];
    var markers = [];
    var map;
      function initMap() {
        var directionsService = new google.maps.DirectionsService();
        var usa = {lat: 41.850033, lng: -87.6500523};

        map = new google.maps.Map(document.getElementById('map'), {
          zoom: 12,
          center: usa
        });

        getUserLocation();
        
        function geocodeLatLng(geocoder, map, infowindow) {
          geocoder.geocode({'location': pos}, function(results, status) {
            if (status === 'OK') {
              if (results[1]) {
                map.setZoom(11);
                var marker = new google.maps.Marker({
                  position: pos,
                  map: map
                });
                infowindow.setContent(results[1].formatted_address);
                infowindow.open(map, marker);
              } else {
                window.alert('No results found');
              }
            } else {
              window.alert('Geocoder failed due to: ' + status);
            }
          });
        }
        
        locations = [];
        <% @markers.each do |marker| %>
          locations.push(["<%=marker.name%>", "<%=marker.address%>", <%=marker.lat%>, <%=marker.lng%>]);
        <% end %>

        var i;

    for (i = 0; i < locations.length; i++) {  
      var localMarker = new google.maps.Marker({
           position: new google.maps.LatLng(locations[i][2], locations[i][3]),
           title: locations[i][0],
           map: map
      });
      markers.push(localMarker);
    }
    //searchLocationsNear(map.getCenter(), markers);
  }

  function getUserLocation(){
    // Try HTML5 geolocation.
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        position = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        map.setCenter(position);

        var personIcon = 'https://maps.google.com/mapfiles/kml/shapes/library_maps.png';
        var userPositionMarker = new google.maps.Marker({
          position: position,
          map: map,
          icon: personIcon
        });
      }, function() {
        handleLocationError(true, infoWindow, map.getCenter());
      });
    } else {
      // Browser doesn't support Geolocation
      handleLocationError(false, infoWindow, map.getCenter());
    }

    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
      infoWindow.setPosition(pos);
      infoWindow.setContent(browserHasGeolocation ?
                            'Error: The Geolocation service failed.' :
                            'Error: Your browser doesn\'t support geolocation.');
    }
  }

  locationSelect = document.getElementById("locationSelect");
    locationSelect.onchange = function() {
      var markerNum = locationSelect.options[locationSelect.selectedIndex].value;
      if (markerNum != "none"){
        google.maps.event.trigger(markers[markerNum], 'click');
      }
    };

  function rad(x) {
    return x * Math.PI / 180;
  }

  function getDistance(p1, p2) {
    var R = 6378137; // Earthâ€™s mean radius in meter
    var dLat = rad(p2.lat() - p1.lat());
    var dLong = rad(p2.lng() - p1.lng());
    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(rad(p1.lat())) * Math.cos(rad(p2.lat())) *
      Math.sin(dLong / 2) * Math.sin(dLong / 2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var d = R * c;
    //return d/1000000; // returns the distance in meter
    return d;
  };

  function searchLocations() {
     var address = document.getElementById("addressInput").value;
     var geocoder = new google.maps.Geocoder();
     geocoder.geocode({address: address}, function(results, status) {
       if (status == google.maps.GeocoderStatus.OK) {
        searchLocationsNear(results[0].geometry.location);
       } else {
         alert(address + ' not found');
       }
     });
   }

  function searchLocationsNear(center) {
    clearLocations();

    var radius = document.getElementById('radiusSelect').value;
    var bounds = new google.maps.LatLngBounds();
    var i = 0;
    <% @markers.each do |marker| %>
      var latlng = new google.maps.LatLng(
        parseFloat(<%=marker.lat%>),
        parseFloat(<%=marker.lng%>));
      var d = getDistance(center,latlng);
      if (d < 600000) {
        createOption("<%=marker.name%>", d, i);
        createMarker(latlng, "<%=marker.name%>", "<%=marker.address%>");
        bounds.extend(latlng);
      }
      
      i++;
    <% end %>
    map.fitBounds(bounds);
  }

  function clearLocations() {
    //infoWindow.close();
    for (var i = 0; i < markers.length; i++) {
      markers[i].setMap(null);
    }

    locationSelect.innerHTML = "";
    var option = document.createElement("option");
    option.value = "none";
    option.innerHTML = "See all results:";
    locationSelect.appendChild(option);
    locationSelect.style.visibility = "visible";
  }

  function createMarker(latlng, name, address) {
    var infoWindow = new google.maps.InfoWindow;
    var html = "<b>" + name + "</b> <br/>" + address;
    var marker = new google.maps.Marker({
      map: map,
      position: latlng
    });
    google.maps.event.addListener(marker, 'click', function() {
      infoWindow.setContent(html);
      infoWindow.open(map, marker);
    });
    markers.push(marker);
    map.zoom = 12;
  }

  function createOption(name, distance, num) {
    var option = document.createElement("option");
    option.value = num;
    option.innerHTML = name + "(" + distance.toFixed(1) + ")";
    locationSelect.appendChild(option);
  }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCmqGGb2Z4_Rkr-gC_i7z50YyQ71Dr6yHk&callback=initMap"
    async defer></script>
